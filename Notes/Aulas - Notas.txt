JAVA - Aulas Iniciais

# Comandos grandes?
# Lançamento focado em pequenas aplicações web (applets) -> Anos 1990
# Objetivo: Transformar o browser para não apenas renderizar HTML, mas também 
realizar operações avançadas.
# Desenvolvimento de aplicações do lado do servidor que deram sucesso ao java.

# Paradigma OO:
  > Proporciona maior simplicidade em criar conexão entre dados e funções;
  > O que é dificil no paradigma estruturado, pois não ha um bom encapsulamento;*

# O código gerado pelo java não é executável na máquina:
        > É um bytecode: código gerado pelo compilador java para a JVM.
        > Pode ser lido por qualquer JVM em qualquer S.O.
        > Uma compilação na VM produz várias execuções
        > Write One, Run Anywhere (WORA)

# JDK - Java Dev Kit #
 >> Para usuários que pretendendem desenvolver apps em java.
 >> Já vem com o JRE (JVM e Libs)
 >> Java Lang
 >> Java Tools
   -> JavaC: Compilador que transforma o source em bytecode java.
   -> Debugger: Debugador java
   -> APIs. 
>> IDE (Opcional)

# JRE - Java Runtime Environment #
 >> Para usuários que apenas querem usar o java na sua maquina.
 >> JVM
   -> Loader: Carrega o Bytecode na memória da JVM.
   -> Verificador: Verifica se o bytecode pode ser executado na JVM.
   -> Interpretador: Converte o bytecode do JAVA em linguagem de máquina.
   -> Gerenciador de Mem.: Vai gerenciar a memória da VM.
   -> JIT Compiler: Compilador Just in Time melhora a performace da JVM.
   -> Sua	aplicação roda sem NENHUM envolvimento com o sistema operacional,	 sempre	 conversando
   apenas com	a Java Virtual Machine (JVM).
   -> Não entende código java, apenas bytecode, gerado por um java compiler;
   
 >> Libs

# Tipos Primitivos
    // inteiros
    byte letras = 127; // inteiro de 1 byte -> max: 127
    short valor = 32767; // inteiro de 2 bytes -> max: 32 767
    int anos = 2147483; // inteiro de 4 bytes -> max: 2 147 483
    long val = 999999999; // inteiro de 8 bytes -> 2^63
    
    // reais
    float sal = 1825.54f; // float de 4 bytes -> 3.4e^38
    double altura = 99999; // float de 8 bytes -> 1.8e^308
    
    char letra = 'G';
    boolean casado = false;

    int ano = (int)1997; //typecast
    float peso = (float)77.56;

    // Wrapper Class -> classe que simula um tipo

    String nome = new String("JAVA");

## Modificadores de acesso
  -> private: apenas métodos dentro da classe podem acessar;
  -> public: métodos de classes externas podem modificar variáveis
  ou chamar métodos public;

## Listas
  -> ArrayList: usar mais quando for armazenar e acessar dados;
  -> LinkedList: usar para manipulação de dados;
  
## Métodos Static x Public
  -> Métodos static podem ser acessados sem instanciar objetos;
    >> Basta apenas chamar o método;

  -> Méodos public apenas podem ser acessados por meio de objetos;
    >> É preciso instanciar o objeto da classe, e então chamar o método
    que estará associado àquele objeto;

# Construtor da classe
  -> Método Especial utilizado para inicializar objetos;
  -> Seta valoes iniciais assim que o objeto é instanciado;

# Modificadores de acesso
  # Classes
  -> public - a classe é acessível a qualquer outra classe.
  -> default - a classe é acesssível a outras do mesmo pacote. Padrão;
  
  # Atributos, Métodos e Construtores
  -> public - código acessivel por qualquer classe;
  -> private - código apenas acessivel pela classe declarada
  -> protected - código acessivel dentro do pacote e subclasses

# Modificadores de Não-acesso
  # Classes
    -> final - a classe nao pode ser herdada;
    -> abstract - a classe nao pode ser usada para criar objetos;
      > deve ser apenas herdada por outras classes;
    
  # Métodos e Atributos
    -> final - Atributos e métodos nao podem ser sobrescritos; "constantes"
    -> static -
    -> abstract - pode apenas ser usado por classes abstratas



## JPA e Hibernate
  -> 